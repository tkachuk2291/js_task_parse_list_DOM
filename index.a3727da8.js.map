{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,ECoBA,AAEA,SAAsB,CAAI,EAKxB,IAAM,EAAU,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,EAHK,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,G,EAGI,IAAI,CAC3B,SAAC,CAAA,CAAU,CADb,EAC0B,OAAA,EAAS,MAAM,CAAG,EAAS,MAAM,A,GAGrD,EAAK,SAAS,aAAa,CAAC,KAElC,CAAA,EAAG,SAAS,CAAG,GAEV,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAc,CAAA,CAAA,OAAA,QAAA,CAAA,GAAd,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAK,SAAS,aAAa,CAAC,KAElC,CAAA,EAAG,WAAW,CAAG,EAAK,IAAI,CAC1B,EAAG,YAAY,CAAC,gBAAiB,EAAK,QAAQ,EAC9C,EAAG,YAAY,CAAC,cAAgB,IAAgC,MAAA,CAA7B,EAAK,MAAM,CAAC,cAAc,KAC7D,EAAG,YAAY,CAAC,WAAY,EAAK,GAAG,EAEpC,EAAG,WAAW,CAAC,EACjB,C,C,M,E,CATK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAUP,EAvCS,MAAM,IAAI,CAJP,SAAS,gBAAgB,CAAC,OAIZ,GAAG,CAAC,SAAC,CAA7B,EAA0C,MAAA,CACxC,KAAM,EAAQ,WAAW,CAAC,IAAI,GAC9B,SAAU,EAAQ,YAAY,CAAC,iBAC/B,OAAQ,OACN,EAAQ,YAAY,CAAC,eAAe,KAAK,CAAC,GAAG,OAAO,CAAC,KAAM,KAE7D,IAAK,EAAQ,YAAY,CAAC,WAC5B,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar lst = document.querySelectorAll(\"li\");\n// Функция для преобразования списка <li> в массив объектов\nfunction sortList(list) {\n    return Array.from(list).map(function(element) {\n        return {\n            name: element.textContent.trim(),\n            position: element.getAttribute(\"data-position\"),\n            salary: Number(element.getAttribute(\"data-salary\").slice(1).replace(/,/g, \"\")),\n            age: element.getAttribute(\"data-age\")\n        };\n    });\n}\n// Преобразуем список <li> в массив объектов\nvar Newlist = sortList(lst);\n// Передаем преобразованный массив объектов в функцию getEmployees\ngetEmployees(Newlist);\nfunction getEmployees(list) {\n    // Создаем копию списка для сортировки\n    var listCopy = _to_consumable_array(list);\n    // Сортируем по зарплате (по убыванию)\n    var NewList = listCopy.sort(function(element1, element2) {\n        return element2.salary - element1.salary;\n    });\n    var ul = document.querySelector(\"ul\");\n    ul.innerHTML = \"\";\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = NewList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var item = _step.value;\n            var li = document.createElement(\"li\");\n            li.textContent = item.name; // Добавляем имя как текст\n            li.setAttribute(\"data-position\", item.position);\n            li.setAttribute(\"data-salary\", \"$\".concat(item.salary.toLocaleString()));\n            li.setAttribute(\"data-age\", item.age);\n            ul.appendChild(li);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=index.a3727da8.js.map\n","'use strict';\n\nconst lst = document.querySelectorAll('li');\n\n// Функция для преобразования списка <li> в массив объектов\nfunction sortList(list) {\n  return Array.from(list).map((element) => ({\n    name: element.textContent.trim(),\n    position: element.getAttribute('data-position'),\n    salary: Number(\n      element.getAttribute('data-salary').slice(1).replace(/,/g, ''),\n    ),\n    age: element.getAttribute('data-age'),\n  }));\n}\n\n// Преобразуем список <li> в массив объектов\nconst Newlist = sortList(lst);\n\n// Передаем преобразованный массив объектов в функцию getEmployees\ngetEmployees(Newlist);\n\nfunction getEmployees(list) {\n  // Создаем копию списка для сортировки\n  const listCopy = [...list];\n\n  // Сортируем по зарплате (по убыванию)\n  const NewList = listCopy.sort(\n    (element1, element2) => element2.salary - element1.salary,\n  );\n\n  const ul = document.querySelector('ul');\n\n  ul.innerHTML = '';\n\n  for (const item of NewList) {\n    const li = document.createElement('li');\n\n    li.textContent = item.name; // Добавляем имя как текст\n    li.setAttribute('data-position', item.position);\n    li.setAttribute('data-salary', `$${item.salary.toLocaleString()}`);\n    li.setAttribute('data-age', item.age);\n\n    ul.appendChild(li);\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","getEmployees","list","NewList","listCopy","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","sort","element1","element2","salary","ul","document","querySelector","innerHTML","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","item","value","li","createElement","textContent","setAttribute","position","concat","toLocaleString","age","appendChild","err","return","querySelectorAll","map","element","trim","getAttribute","Number","replace"],"version":3,"file":"index.a3727da8.js.map"}